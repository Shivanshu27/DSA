Arrays in JavaScript
Arrays are a fundamental data structure that store a collection of elements, typically of the same type,
in a contiguous block of memory. Each element can be accessed by its index, which starts from 0.

Common Array Methods
1. `push()`: Adds one or more elements to the end of an array.
javascript
let arr = [1, 2, 3];
arr.push(4); // arr is now [1, 2, 3, 4]
2. `pop()`: Removes the last element from an array.
javascript
let arr = [1, 2, 3];
let lastElement = arr.pop(); // lastElement is 3, arr is now [1, 2]
3. `shift()`: Removes the first element from an array.
javascript
let arr = [1, 2, 3];
let firstElement = arr.shift(); // firstElement is 1, arr is now [2, 3]
4. `unshift()`: Adds one or more elements to the beginning of an array.
javascript
let arr = [1, 2, 3];
arr.unshift(0); // arr is now [0, 1, 2, 3]
5. `splice()`: Adds/removes elements from an array.
javascript
let arr = [1, 2, 3, 4, 5];
arr.splice(2, 1); // Removes one element at index 2, arr is now [1, 2, 4, 5]
arr.splice(2, 0, 3); // Adds 3 at index 2, arr is now [1, 2, 3, 4, 5]
6. `slice()`: Returns a shallow copy of a portion of an array.
javascript
let arr = [1, 2, 3, 4, 5];
let newArr = arr.slice(1, 3); // newArr is [2, 3], arr remains unchanged
7. `concat()`: Merges two or more arrays.
javascript
let arr1 = [1, 2];
let arr2 = [3, 4];
let combined = arr1.concat(arr2); // combined is [1, 2, 3, 4]
8. `join()`: Joins all elements of an array into a string.
javascript
let arr = [1, 2, 3];
let str = arr.join('-'); // str is '1-2-3'
9. `reverse()`: Reverses the order of the elements in an array.
javascript
let arr = [1, 2, 3];
arr.reverse(); // arr is now [3, 2, 1]
10. `sort()`: Sorts the elements of an array.
javascript
let arr = [3, 1, 4, 1, 5, 9];
arr.sort(); // arr is now [1, 1, 3, 4, 5, 9]



Higher-Order Functions
1. `forEach()`: Executes a provided function once for each array element.
javascript
let arr = [1, 2, 3];
arr.forEach(element => {
console.log(element); // Logs 1, 2, 3
});
2. `map()`: Creates a new array with the results of calling a provided function on every element.
javascript
let arr = [1, 2, 3];
let doubled = arr.map(x => x * 2); // doubled is [2, 4, 6]
3. `filter()`: Creates a new array with all elements that pass the test implemented by the provided
function.
javascript
let arr = [1, 2, 3, 4];
let even = arr.filter(x => x % 2 === 0); // even is [2, 4]
4. `reduce()`: Executes a reducer function on each element of the array, resulting in a single output
value.
javascript
let arr = [1, 2, 3, 4];
let sum = arr.reduce((acc, x) => acc + x, 0); // sum is 10
5. `find()`: Returns the first element that satisfies the provided testing function.
javascript
let arr = [1, 2, 3, 4];
let firstEven = arr.find(x => x % 2 === 0); // firstEven is 2
6. `findIndex()`: Returns the index of the first element that satisfies the provided testing function.
javascript
let arr = [1, 2, 3, 4];
let firstEvenIndex = arr.findIndex(x => x % 2 === 0); // firstEvenIndex is 1
7. `some()`: Tests whether at least one element in the array passes the test implemented by the
provided function.
javascript
let arr = [1, 2, 3, 4];
let hasEven = arr.some(x => x % 2 === 0); // hasEven is true
8. `every()`: Tests whether all elements in the array pass the test implemented by the provided
function.
javascript
let arr = [1, 2, 3, 4];
let allEven = arr.every(x => x % 2 === 0); // allEven is false
9. `includes()`: Determines whether an array includes a certain element.
javascript
let arr = [1, 2, 3];
let hasTwo = arr.includes(2); // hasTwo is true