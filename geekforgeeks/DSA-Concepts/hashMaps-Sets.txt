HashMaps and Sets in JavaScript
In JavaScript, `Map` and `Set` are built-in objects that allow you to store collections of unique elements
and key-value pairs, respectively. These objects are part of ES6 (ECMAScript 2015) and offer powerful
ways to manage data.


HashMap (Map)
A `Map` object holds key-value pairs and remembers the original insertion order of the keys. Unlike plain
JavaScript objects, keys in `Map` can be any value (including functions, objects, or any primitive).
Example of Using a Map
javascript
// Creating a new Map
let map = new Map();
// Adding key-value pairs
map.set('name', 'Alice');
map.set('age', 30);
map.set('job', 'Engineer');
// Accessing values
console.log(map.get('name')); // Outputs: Alice
console.log(map.get('age')); // Outputs: 30
// Checking if a key exists
console.log(map.has('job')); // Outputs: true
// Removing a key-value pair
map.delete('age');
// Checking the size of the map
console.log(map.size); // Outputs: 2
// Iterating over a map
map.forEach((value, key) => {
console.log(key, value);
});
// Outputs:
// name Alice
// job Engineer

Key Methods and Properties of Map
`set(key, value)`: Adds or updates an element with the specified key and value.
`get(key)`: Returns the value associated with the specified key.
`has(key)`: Returns a boolean indicating whether an element with the specified key exists.
`delete(key)`: Removes the element with the specified key.
`size`: Returns the number of elements in the Map.
`clear()`: Removes all elements from the Map.
`forEach(callback)`: Executes a provided function once for each key-value pair in the Map.



Sets
A `Set` object lets you store unique values of any type, whether primitive values or object references.
Example of Using a Set
javascript
// Creating a new Set
let set = new Set();
// Adding values
set.add(1);
set.add(2);
set.add(3);
set.add(2); // Duplicate values are ignored
// Checking if a value exists
console.log(set.has(1)); // Outputs: true
console.log(set.has(4)); // Outputs: false
// Removing a value
set.delete(2);
// Checking the size of the set
console.log(set.size); // Outputs: 2
// Iterating over a set
set.forEach(value => {
console.log(value);
});
// Outputs:
// 1
// 3
// Converting a Set to an Array
let array = Array.from(set);
console.log(array); // Outputs: [1, 3]
Key Methods and Properties of Set
`add(value)`: Adds a new element with the specified value.
`has(value)`: Returns a boolean indicating whether an element with the specified value exists.
`delete(value)`: Removes the element with the specified value.
`size`: Returns the number of elements in the Set.
`clear()`: Removes all elements from the Set.
`forEach(callback)`: Executes a provided function once for each value in the Set.
Practical Example: Using Map and Set Together
Imagine you have a list of users, and you want to count how many times each user appears. You can use
a `Map` to store the count and a `Set` to ensure unique users.
javascript
let users = ['Alice', 'Bob', 'Alice', 'Bob', 'Charlie', 'Bob'];
// Using a Map to count occurrences
let userCount = new Map();
users.forEach(user => {
if (userCount.has(user)) {
userCount.set(user, userCount.get(user) + 1);
} else {
userCount.set(user, 1);
}
});
userCount.forEach((count, user) => {
console.log(`${user}: ${count}`);
});
// Outputs:
// Alice: 2
// Bob: 3
// Charlie: 1
// Using a Set to get unique users
let uniqueUsers = new Set(users);
console.log(Array.from(uniqueUsers)); // Outputs: ['Alice', 'Bob', 'Charlie']
Summary
Map: Stores key-value pairs and remembers the original insertion order of the keys. Keys can be of
any type.
Set: Stores unique values of any type and automatically ignores duplicates.